<?php

namespace Tests\Feature\$MODULENAME$;

use $MODULE$\Models\$CLASS$;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class $CLASS$Test extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    public function setUp(): void
    {
        parent::setUp();
        $this->withoutExceptionHandling();
        $this->actingAs(User::factory()->create());
    }

    public function testGetAll$CLASS$s()
    {
        $CLASS$::factory()->count(20)->create();

        $response = $this->get(route('$API$.index'));

        $response->assertStatus(200)
            ->assertJsonStructure([
                'data'  => [
                    [
$TEMPLATE$
                    ]
                ],
                'links' => [
                    'first',
                    'last',
                    'prev',
                    'next',
                ],
                'meta'  => [
                    'current_page',
                    'from',
                    'last_page',
                    'links',
                ]
            ]);
    }

    public function testGet$CLASS$ById()
    {
        $model = $CLASS$::factory()->create();

        $response = $this->get(route('$API$.index', ['id' => $model->id]));

        $response->assertStatus(200)
            ->assertJsonStructure([
                'data'  => [
                    [
$TEMPLATE$
                    ]
                ],
                'links' => [
                    'first',
                    'last',
                    'prev',
                    'next',
                ],
                'meta'  => [
                    'current_page',
                    'from',
                    'last_page',
                    'links',
                ]
            ]);
    }


    public function testCreate$CLASS$()
    {
        /** @var $CLASS$  $model */
        $model = $CLASS$::factory()->make();

        $data = [
$TEMPLATEDATA$
        ];

        $response = $this->postJson(
            route('$API$.store'),
            $data
        );

        $response->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    'id',
                ],
            ]);

         $this->assertDatabaseHas($model->getTable(), [
$TEMPLATEDATA$
         ]);
    }

    public function testUpdate$CLASS$()
    {
        $id = $CLASS$::factory()->create()->id;
        $model = $CLASS$::factory()->make();

        $data = [
$TEMPLATEDATA$
        ];

        $response = $this->putJson(
            route('$API$.update', ['$API$' => $id]),
            $data
        );

        $response->assertStatus(200)
            ->assertJsonStructure([
                'data' => [
                    'id',
                ],
            ]);

         $this->assertDatabaseHas($model->getTable(), [
             'id'   => $id,
$TEMPLATEDATA$
         ]);
    }

    public function testDelete$CLASS$()
    {
        $model = $CLASS$::factory()->create();

        $response = $this->delete(
            route('$API$.destroy', ['$API$' => $model->id]),
        );

       $response->assertStatus(200)
           ->assertJson([
               'message' => "Данные успешно удалены"
           ]);
    }
}
